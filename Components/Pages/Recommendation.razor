@page "/recommendation"
@using OpinionRecommender.Services
@inject OpinionRecommender.Services.RecommendationService RecommendationService

<h3>Recomendador de Productos</h3>

<div class="mb-3">
    <label for="userIdInput" class="form-label">UserId (ej: U1, U2, U3, U4, U5)</label>
    <input id="userIdInput" class="form-control" @bind="userId" />
</div>
<button class="btn btn-primary" @onclick="Recomendar">Recomendar</button>

@if (recomendaciones != null && !string.IsNullOrWhiteSpace(userId))
{
    <h4>Recomendaciones visuales:</h4>
    @if (recomendaciones.Count == 0)
    {
        <div class="alert alert-warning">No se encontraron recomendaciones para el usuario ingresado. Prueba con U1, U2, U3, U4 o U5.</div>
    }
    else
    {
        <div class="row">
            @foreach (var rec in recomendaciones.OrderByDescending(x => x.Score))
            {
                var prod = productos.FirstOrDefault(p => p.ProductId == rec.ProductId);
                <div class="col-md-4 mb-3">
                    <div class="card h-100 shadow-sm">
                        <img src="@prod.Imagen" class="card-img-top" alt="@prod.Nombre" style="max-height:200px; min-height:180px; object-fit:cover; width:100%; border-bottom:1px solid #eee;" />
                        <div class="card-body">
                            <h5 class="card-title">@prod.Nombre</h5>
                            <p class="card-text">Score de recomendaci√≥n: <b>@rec.Score.ToString("F2")</b></p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    private string? userId;
    private List<(string ProductId, float Score)>? recomendaciones = new();
    private List<(string ProductId, string Nombre, string Imagen)> productos = OpinionRecommender.MLModel.DatosFicticios.Productos;

    private async Task Recomendar()
    {
        if (string.IsNullOrWhiteSpace(userId))
        {
            recomendaciones = new List<(string, float)>();
            await InvokeAsync(StateHasChanged);
            return;
        }
        var userIdUpper = userId.ToUpperInvariant();
        recomendaciones = RecommendationService.Recommend(userIdUpper, 5);
        await InvokeAsync(StateHasChanged);
    }
}
